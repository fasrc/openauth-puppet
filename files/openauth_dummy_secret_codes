#!/usr/bin/env bash
#set -e

helpstr="\
NAME
	openauth_dummy_secret_codes - generate THIS-IS-A-DUMMY-SECRET codes

SYNOPSIS
	openauth_dummy_secret_code [--code-log PATH] ...

DESCRIPTION
	This runs jauthcli to save the codes and timestamps from using
	THIS-IS-A-DUMMY-SECRET as the personal secret.  JAuth GUI has this as it's
	default, and many people don't replace it with their own.

OPTIONS
	--code-log PATH
		File to which to save code (jauthcli output).  Default is /dev/stdout.

	--log-file PATH
		File to which to send other output.  Default is /dev/stdout, except if
		--deamonize is given, in which case it's /dev/null and specifying
		--log-file is highly recommended.

	-d, --debug
		Output extra verbose debugging information.

	--daemonize
		Run in daemon mode.  In daemon mode, all uncaught stdout and stderr is
		also sent to the --log-file.

	-h, --help
		Print this help.

REQUIREMENTS
	n/a

BUGS/TODO
	n/a

AUTHOR
	Copyright (c) 2014
	Harvard FAS Research Computing
	John A. Brunelle
	All rights reserved.
"

#if this is only being run to get the help, just do it and quit
getopt -q -l help -o h -- "$@" | egrep -q '^ -h|^ --help' && echo -n "$helpstr" && exit


#--- daemonize, if applicable

#if daemonizing, do that right away (can't do normal full getopt yet since that modifies the arguments)
#see https://raw.github.com/jabrcx/miscnix/master/bin/daemonize for full details -- this is extracted from there
daemonize=false;
getopt -q -l daemonize -o h -- "$@" | egrep -q '^ --daemonize' && daemonize=true
if $daemonize; then
	if [ -z "${DAEMONIZED:-}" ]; then
		export DAEMONIZED=1
		setsid "$0" "$@"
		exit
	elif [ "$DAEMONIZED" -eq 1 ]; then
		export DAEMONIZED=2
		"$0" "$@" <&0 &
		exit
	elif [ "$DAEMONIZED" -eq 2 ]; then
		DAEMONIZED=y
		cd /
		test -t 0 && exec 0</dev/null
		test -t 1 && exec 1>>/dev/null
		test -t 2 && exec 2>>/dev/null
		unset DAEMONIZED
	else
		echo "*** ERROR *** the DAEMONIZED environment variable appears to already be in use for some other purpose" >&2
		exit 1
	fi
fi


#--- default values for parameters

code_log='/dev/stdout'
debug=false
log_file='/dev/stdout'


#--- getopt

args=$(getopt -n "$(basename "$0")" -l code-log:,log-file:,debug,daemonize,help -o pdh -- "$@")
if [ $? -ne 0 ]; then
	exit 65  #(getopt will have written the error message)
fi
eval set -- "$args"
while [ ! -z "$1" ]; do
	case "$1" in
		--code-log)
			code_log="$2"
			shift

			;;

		--log-file)
			log_file="$2"
			shift

			#do this ASAP
			#(or remove this if you don't want the possiblity of un-prefixed lines in the log (but then it will be lost to /dev/null))
			if $daemonize; then
				exec 1>>"$log_file"
				exec 2>>"$log_file"
			fi

			;;

		-d | --debug)
			debug=true
			;;

		#(this will have been handled earlier, just resetting setting the parameter value now)
		--daemonize)
			daemonize=true
			;;

		#(this should've been caught earlier, just here for completeness)
		-h | --help)
			echo -n "$helpstr"
			exit 0
			;;

		--)
			shift
			break
			;;
	esac
	shift
done

set -u

function log () {
	prefix="$(date '+%Y-%m-%d %H:%M:%S'): pid $$"
	##if using a $pretend parameter
	#$pretend && prefix="$prefix: pretend mode"
	cat | sed s/^/"${prefix}: "'/' >> "$log_file"
}

#w/o killing the whole process group, java children are left running
trap 'kill -TERM -$(ps -o pgid= -p $$); echo "exiting, pid [$$]" | log' EXIT

echo "starting, pid [$$]" | log


#---

/n/openauth/sw/jauthcli/jauthcli --add-timestamp <(echo 'THIS-IS-A-DUMMY-SECRET') >> $code_log
